from flask import Flask, request, jsonify, send_file
from werkzeug.contrib.cache import FileSystemCache
from multiprocessing import Process
import io
import time

app = Flask(__name__)
cache = FileSystemCache('/path/to/cache/directory')

def cache_specific_image(target, cache_key_prefix):
    with app.test_client() as client:
        cache_key = f"{cache_key_prefix}_{target}"
        client.post('/get_image', json={'target': target, 'cache_key': cache_key})

@app.route('/get_image', methods=['POST'])
def get_image():
    data = request.json
    target = data.get('target')
    init = data.get('init', False)

    if init:
        cache_key_prefix = str(time.time())  # Use current time as a unique prefix for caching
        targets = data.get('target_list', [])
        for t in targets:
            p = Process(target=cache_specific_image, args=(t, cache_key_prefix))
            p.start()
        return jsonify({"message": "Image caching in progress for targets", "cache_key_prefix": cache_key_prefix}), 202

    cache_key = f"{data.get('cache_key', 'default')}_{target}"

    cached_image = cache.get(cache_key)
    if cached_image:
        return send_file(io.BytesIO(cached_image), mimetype='image/jpeg')

    # 画像生成処理
    time.sleep(2)  # サンプルのための遅延
    image_bytes = b"FAKE_IMAGE_BYTES"

    # キャッシュ
    cache.set(cache_key, image_bytes)

    return send_file(io.BytesIO(image_bytes), mimetype='image/jpeg')

if __name__ == '__main__':
    app.run(debug=True)
