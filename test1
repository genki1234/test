std::vector<double> generate_candidates(const std::vector<Data>& variables, int num_candidates, int seed, const Setting& setting) {
    std::vector<double> candidates;
    std::mt19937 gen(seed);

    int max_attempts = std::numeric_limits<int>::max();

    for (int attempts = 0; attempts < max_attempts; ++attempts) {
        std::vector<double> temp_candidates;
        for (const auto& var : variables) {
            int steps = static_cast<int>((var.max_val - var.min_val) / var.interval) + 1; // +1 to include max_val
            std::uniform_int_distribution<> dis(0, steps);

            double val = var.min_val + dis(gen) * var.interval;

            // Clip the value to max_val
            if (val > var.max_val) {
                val = var.max_val;
            }

            temp_candidates.push_back(val);
        }

        if (evaluate_candidate(temp_candidates, setting)) {
            candidates.insert(candidates.end(), temp_candidates.begin(), temp_candidates.end());

            // If we've generated enough candidates, return them
            if (candidates.size() >= num_candidates * variables.size()) {
                return candidates;
            }
        }
    }

    return candidates;
}
