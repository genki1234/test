std::vector<double> generate_candidates(const std::vector<Data>& variables, int num_candidates, int seed) {
    std::vector<double> candidates;

    std::mt19937 gen(seed);
    int num_generated_candidates = 0;
    int max_attempts = num_candidates * 10; // Adjust this value as needed

    while (num_generated_candidates < num_candidates && max_attempts-- > 0) {
        double remaining = 1.0;
        std::vector<double> temp_candidates;
        for (const auto& var : variables) {
            if (var.cat == 0) { // 数値型の場合
                double min_in_increments = std::ceil(var.min_val / var.interval);
                double max_in_increments = std::floor(var.max_val / var.interval);
                std::uniform_int_distribution<> dis(min_in_increments, max_in_increments);
                double val_in_increments = dis(gen);
                double val = val_in_increments * var.interval;

                temp_candidates.push_back(val);
            }
            else { // カテゴリ型の場合
                std::uniform_real_distribution<> dis(0.0, remaining);
                double val = dis(gen);
                remaining -= val;
                temp_candidates.push_back(val);
            }
        }
        if (evaluate_candidate(temp_candidates, setting)) {
            candidates.insert(candidates.end(), temp_candidates.begin(), temp_candidates.end());
            num_generated_candidates++;
        }
    }

    if (num_generated_candidates < num_candidates) {
        std::cout << "Error: Unable to generate enough valid candidates.\n";
    }

    return candidates;
}
