std::vector<double> generate_candidates(const std::vector<Data>& variables, int num_candidates, int seed) {
    std::vector<double> candidates;
    std::mt19937 gen(seed);

    int max_attempts = std::numeric_limits<int>::max(); // 繰り返しの上限

    for (int attempts = 0; attempts < max_attempts; ++attempts) {
        double remaining = 1.0;
        std::vector<double> temp_candidates;
        for (const auto& var : variables) {
            // 同じ変数の値を生成する部分は変わりません
            // ...
        }
        if (evaluate_candidate(temp_candidates, setting)) {
            candidates.insert(candidates.end(), temp_candidates.begin(), temp_candidates.end());
            // 既定の生成数に達したらループを抜ける
            if (candidates.size() >= num_candidates * variables.size()) {
                return candidates;
            }
        }
    }

    std::cout << "Error: Unable to generate enough valid candidates.\n";
    return candidates;
}
